var sysPath = require('path');
var fs = require('fs');
var https = require('https');
var WebSocketServer = require('ws').Server;
var isWorker = require('cluster').isWorker;
var isHtml = function(file) {
  var ext = sysPath.extname(file);
  return ext === '.html';
};
var isCss = function(file) {
  var ext = sysPath.extname(file);
  return ext === '.css' || ext === '.less' || ext == '.sass';
};
var startingPort = 9485;
var gutil = require('gulp-util');
var PluginError = gutil.PluginError;
var File = gutil.File;
var Readable = require('stream').Readable;
var through = require('through2');

function AutoReloader(cfg) {
  if (cfg == null) cfg = {};

  var ports = [];

  if (cfg.port == null) {
    for (var i = 0; i < 11; i++) ports.push(startingPort + i);
  } else {
    ports = Array.isArray(cfg.port) ? cfg.port.slice() : [cfg.port];
  }

  this.enabled = (cfg.enabled == null) ? true : cfg.enabled;
  this.delay = cfg.delay;

  var conns = this.connections = [];
  var host = cfg.host || '0.0.0.0';
  var port = this.port = ports.shift();

  var key, cert;
  if (cfg.keyPath && cfg.certPath) {
    this.ssl = true;
    key = fs.readFileSync(cfg.keyPath);
    cert = fs.readFileSync(cfg.certPath);
    if (key && cert) {
      this.httpsServer = https.createServer({key: key, cert: cert}).listen(port, host);
    }
  }

  var startServer = this.start = (function() {
    if (!this.enabled || isWorker) {
      return;
    }
    this.port = port;
    var args = this.httpsServer ? {server: this.httpsServer} : {host: host, port: port}
    var server = this.server = new WebSocketServer(args);
    gutil.log('Started reload server on', gutil.colors.magenta(JSON.stringify(args)));
    server.on('connection', function(conn) {
      conns.push(conn);
      conn.on('close', function() {
        conns.splice(conn, 1);
      });
    });
    server.on('error', function(error) {
      if (error.toString().match(/EADDRINUSE/)) {
        if (ports.length) {
          port = ports.shift();
          startServer();
        } else {
          error = "cannot start because port " + port + " is in use";
        }
      }
      // console.error("AutoReload " + error);
    });
  }).bind(this);


  this.onChange = (function(ev) {

    var changedFiles = [ev.path];

    var enabled = this.enabled;
    var conns = this.connections;
    if (!enabled) return;

    var didCompile = changedFiles.length > 0;
    var allCss = didCompile && changedFiles.every(isCss);

    var message = allCss ? 'stylesheet' : 'page';
    var sendMessage = function() {
      conns
        .filter(function(connection) {
          return connection.readyState === 1;
        })
        .forEach(function(connection) {
          return connection.send(message);
        });
    };

    this.delay ? setTimeout(sendMessage, this.delay) : sendMessage();
  }).bind(this);

  // and maybe fire it up
  if (!cfg.manualStart) {
    startServer();
  }

}


AutoReloader.prototype.stop = function() {
  if (this.server) this.server.close();
  if (this.httpsServer) this.httpsServer.close();
};

AutoReloader.prototype.isStarted = function () {
  return !!(this.server || this.httpsServer);
};

var fileName = 'auto-reload.js';
var filePath = sysPath.join(__dirname, 'vendor', fileName);

AutoReloader.prototype.script = function() {
  var readable = new Readable({objectMode:true});
  var once = false;
  readable._read = function () {
    if (once) {
      return;
    }
    once = true;
    fs.readFile(filePath, function(err, buf) {
      var file = new File({
        base: sysPath.dirname(filePath),
        cwd: __dirname,
        path: filePath,
        name: fileName,
        contents: buf
      });
      readable.push(file);
      readable.push(null);
    });
  };
  return readable;
};

AutoReloader.prototype.inject = function(prefix) {
  prefix = prefix || "";
  return through.obj(function(file, enc, cb) {
    if (isHtml(file.path)) {
      var html = file.contents.toString(enc);
      html = html.replace("</body>",
                          '<script src="' + prefix + 'auto-reload.js"></script></body>');
      file.contents = new Buffer(html);
    }
    cb(null, file);
  });
};

module.exports = function(cfg) {
  return new AutoReloader(cfg);
};
